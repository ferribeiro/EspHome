esphome:
  name: water-quality-btpx
  friendly_name: water-quality-btpx

esp32:
  board: esp32dev

  framework:
    type: esp-idf
    sdkconfig_options:
      CONFIG_BT_BLE_50_FEATURES_SUPPORTED: y
      CONFIG_BT_BLE_42_FEATURES_SUPPORTED: y
      CONFIG_ESP_TASK_WDT_TIMEOUT_S: "10"

web_server:
  port: 80

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "/LKlMP4g+8sZyqWltayWGM5FeluGaYUfhoeeZCuZjA8="

ota:
  password: "c25e0b407ea80ca7e12fd5ae0eb78b06"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  manual_ip:
    static_ip: 192.168.0.223
    gateway: 192.168.0.1
    subnet: 255.255.255.0
    dns1: 8.8.8.8
    dns2: 192.168.0.1

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Water-Quality"
    password: "12345678"

captive_portal:

############################### BT PROXY ###################################

# esp32_ble_tracker:
#   scan_parameters:
#     active: true

# bluetooth_proxy:
#   active: true  

# external_components:
#   - source: github://edenhaus/esphome/test-dallas
#     components:
#       - dallas
      

########################## TURBIDITY METER ##############################


############################# TDS METER #################################

#sensor: 

### TDS 01
# Raw TDS Reading
#   - platform: adc
#     pin: GPIO39
#     name: "TDS 01 Raw"
#     id: tds01_raw
#     update_interval: 10s
#     unit_of_measurement: "v"
#     icon: "hass:water-opacity"
#     accuracy_decimals: 3

# # Temperature Compensated Voltage
# - platform: template
#   name: "TDS 01 TCV"
#   id: temp01_comp_v
#   unit_of_measurement: 'v'
#   accuracy_decimals: 3
#   lambda: 'return ((id(tds01_raw).state) / (1 + (0.02 * ((id(probe01).state) - 25.0))));'
#   update_interval: 10s
#   internal: true

# # Temperature Compensated TDS
# - platform: template
#   name: "55G TDS 01"
#   id: tds01_55g
#   icon: "hass:water-opacity"
#   unit_of_measurement: 'PPM'
#   accuracy_decimals: 0    
#   lambda: return (133.42*(id(temp01_comp_v).state)*(id(temp01_comp_v).state)*(id(temp01_comp_v).state) - 255.86*(id(temp01_comp_v).state)*(id(temp01_comp_v).state) + 857.39*(id(temp01_comp_v).state))*0.5;



  # - platform: adc
  #   pin: GPIO39
  #   name: "Water TDS"
  #   update_interval: 1s
  #   unit_of_measurement: "ppm"
  #   filters:
  #     - lambda: return (((133.42*(x*(3.3/1024))*(x*(3.3/1024))*(x*(3.3/1024))) - (255.86*(x*(3.3/1024))*(x*(3.3/1024))) + (857.39*(x*(3.3/1024))))*0.5)*1000;



# #Dallas IO19
# dallas:
#   - pin: GPIO19

# sensor:
#   - platform: dallas
#     address: 0x1c0000031edd2a28
#     name: "Livingroom Temperature"

# switch:
#   - platform: gpio
#     name: "led1"
#     id: led
#     pin: GPIO21

# # Temperature In °C
#   - platform: dallas
#     address: 0x6f01205fd42aa428
#     name: "Probe 01"
#     id: probe01
#     unit_of_measurement: "°C"
#     internal: true

########################## WATER FLUX METER ###############################

# #sensor:
#   - platform: pulse_counter
#     pin: GPIO4
#     unit_of_measurement: 'l/min'
#     id: water_usage
#     name: 'Fluxo de água'
#     update_interval: 5s
#     filters:
#       - lambda: return (x / 330); # 396 = 5,5 * 60 (https://www.openhacks.com/uploadsproductos/g3_4_water_flow_sensor_-_wiki.pdf)
# #      - lambda: return (x / 396); # 396 = 6,6 * 60
#   - platform: integration
#     name: "Consumo total (litros)"
#     unit_of_measurement: 'l'
#     sensor: water_usage
#     time_unit: min
#   - platform: integration
#     name: "Consumo total (metros cúbicos)"
#     unit_of_measurement: 'm3'
#     sensor: water_usage
#     time_unit: min
#     filters:
#       - lambda: return (x / 1000);
