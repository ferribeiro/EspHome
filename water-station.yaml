esphome:
  name: water-station
  friendly_name: water-station

esp32:
  board: esp32dev
  framework:
    type: arduino

#  framework:
#    type: esp-idf
#    sdkconfig_options:
#      CONFIG_BT_BLE_50_FEATURES_SUPPORTED: y
#      CONFIG_BT_BLE_42_FEATURES_SUPPORTED: y
#      CONFIG_ESP_TASK_WDT_TIMEOUT_S: "10"

web_server:
  port: 80

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "Mz/uStDTNLGMikYHeekbvgXr+g3WXAeanDGR0VLD9r8="

ota:
  password: "c42d39fba322b9b6d3ea6c70274497f8"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  manual_ip:
    static_ip: 192.168.0.223
    gateway: 192.168.0.1
    subnet: 255.255.255.0
    dns1: 8.8.8.8
    dns2: 192.168.0.1

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Water-Station"
    password: "12345678"

captive_portal:

#----------------------------------------------------------------
dallas:
  - pin: GPIO19

#----------------------------------------------------------------
sensor:

# Temperature In °C
  - platform: dallas # Don't forget the 4k7 pull-up resistor
    address: 0x6603079779849b28
    name: "Water Temp."
    id: water_temp
#   internal: true

#Raw TDS Reading - Total Dissolved Solids
  - platform: adc
    pin: GPIO39
    name: "TDS 01 Raw"
    id: tds01_raw
    update_interval: 5s #Aumentar este tempo para tipo 10/30/60 seg.
    unit_of_measurement: "volts"
    icon: "hass:water-opacity"
    accuracy_decimals: 3
    internal: true

# Temperature Compensated Voltage
# float CompensationFactor = 1.0+0.02*(Temperature-25.0);
  - platform: template
    name: "TDS 01 TCV"
    id: temp01_comp_v
    unit_of_measurement: 'volts'
    accuracy_decimals: 3
    lambda: 'return ((id(tds01_raw).state) / (1 + (0.02 * ((id(water_temp).state) - 25.0))));'
    update_interval: 5s #Aumentar este tempo para tipo 10/30/60 seg.
    internal: true

# Temperature Compensated TDS
# float voltage_value = (((float)avgval_ADC*5.0/1024.0/6)/CompensationFactor);
# float TDS = (133.42/voltage_value*voltage_value-255.86*voltage_value*voltage_value + 857.39*voltage_value)*0.5;
  - platform: template
    name: "TDS (Total Dissolved Solids)"
    id: tds01_55g
    icon: "hass:water-opacity"
    unit_of_measurement: 'PPM'
    accuracy_decimals: 0    
    lambda: return (133.42*(id(temp01_comp_v).state)*(id(temp01_comp_v).state)*(id(temp01_comp_v).state) - 255.86*(id(temp01_comp_v).state)*(id(temp01_comp_v).state) + 857.39*(id(temp01_comp_v).state))*0.5;
    update_interval: 5s #Aumentar este tempo para tipo 10/30/60 seg.

## Tst
#   - platform: template
#     name: "TDS no Temp (Teste)"
#     id: tds_no_temp
#     unit_of_measurement: "PPM"
#     accuracy_decimals: 3
#     lambda: return ((33.42 * (id(tds01_raw).state) * (3.3 / 1024) * (id(tds01_raw).state) * (3.3 / 1024) * (id(tds01_raw).state) * (3.3 / 1024)) - (255.86 * (id(tds01_raw).state) * (3.3 / 1024) * (id(tds01_raw).state) * (3.3 / 1024)) + (857.39 * (id(tds01_raw).state) * (3.3 / 1024))) * 0.5 * 1000;
#     update_interval: 5s #Aumentar este tempo para tipo 10/30/60 seg.
# #   internal: true

#----------------------------------------------------------------
binary_sensor:

  - platform: status #Status Binary Sensor exposes the node state for Home Assistant (if it’s connected to via MQTT/native API).
    name: "Water Station 1"

#----------------------------------------------------------------
output:

  # Register the blue LED as a dimmable output ....
  - platform: ledc
    id: blue_led
    pin: GPIO2
#    inverted: true

#----------------------------------------------------------------
light:
  # ... and then make a light out of it.
  - platform: monochromatic
    name: "Blue LED"
    output: blue_led